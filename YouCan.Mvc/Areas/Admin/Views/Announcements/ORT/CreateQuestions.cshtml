@using YouCan.Mvc.Areas.Admin.ViewModels
@model TestsModel

@{
    Layout = "_Admin";
}

<div class="creationPage" data-page="2">
    <input type="number" asp-for="TestId" value="@ViewBag.TestId" hidden/>
    <input type="hidden" asp-for="Questions" id="questionsObjs" />
    <h5>Создание теста</h5>
    <div id="question-container" class="mt-4 col-6 mx-auto">
        <button type="button" class="btn btn-success add-question-button">Добавить Вопрос</button>
        <!-- Question forms will be appended here dynamically -->
    </div>
    <button id="finish" class="btn btn-success m-5">Добавить вопросы к тесту</button>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let moduleCounter = 0;
        let currentPage = 1;
        const totalPages = document.querySelectorAll('.creationPage').length;

        let questionCounter = 1;

        function addQuestion() {
            questionCounter++;
            const formId = `question-form-${questionCounter}`;

            const questionFormHtml = `
                            <div class="question border border-secondary rounded-3 my-4 p-3" id="${formId}">
                                <h5>Вопрос №${questionCounter - 1}</h5>
                                <input type="text" class="form-control" placeholder="Введите инструкцию к вопросу" name="instruction" required/>
                                <input type="text" class="form-control mt-3" placeholder="Введите вопрос" name="text" required/>
                                <input type="number" class="form-control mt-3" placeholder="Введите баллы за вопрос" value="1" name="point"/>
                                <input type="file" class="form-control mt-3" name="image" />

                                <div class="answers mt-3">
                                    <!-- Answers will be added here dynamically -->
                                </div>
                                <button type="button" class="btn btn-primary add-answer-button mt-3">Добавить Ответ</button>
                                <button type="button" class="btn btn-light mt-4 module-cancel-button">Отмена</button>
                            </div>`;

            $('#question-container').append(questionFormHtml);

            // Automatically add 4 answers, with the first answer's isCorrect radio checked by default
            for (let i = 0; i < 4; i++) {
                addAnswer(formId, false, i === 0);
            }

            // Event listener for adding answers
            $(`#${formId} .add-answer-button`).click(function () {
                addAnswer(formId, true);
            });

            $(`#${formId} .module-cancel-button`).click(function () {
                $(`#${formId}`).remove();
            });

            // Initialize answer inputs based on the default format
            $(`#${formId} .format-selection input:checked`).change();
        }


        function addAnswer(formId, withCancelButton, isCorrectDefault = false) {
            const uniqueRadioId = `isCorrect-${formId}-${Date.now()}`; // Unique ID for each radio button
            const radioName = `isCorrect-${formId}`; // Name attribute for grouping radios

            const cancelButtonHtml = withCancelButton ? `
                            <div class="col-auto">
                                <button type="button" class="btn btn-danger cancel-answer-button">Отмена</button>
                            </div>` : '';

            const answerFormHtml = `
                            <div class="answer align-items-center justify-content-between mb-3">
                                <div class="col-auto">
                                    <label for="${uniqueRadioId}">Нажмите если это правильный ответ</label>
                                    <input id="${uniqueRadioId}" class="form-check isCorrect" type="radio" name="${radioName}" ${isCorrectDefault ? 'checked' : ''} />
                                </div>
                                <div class="col p-0 answer-content">
                                    <input data-answer-input-type="text" name="answerText" class="form-control" placeholder="Введите текст ответа" required/>
                                </div>
                                ${cancelButtonHtml}
                            </div>`;

            const $answerContainer = $(`#${formId} .answers`);
            const $newAnswerForm = $(answerFormHtml);

            if (withCancelButton) {
                $newAnswerForm.find('.cancel-answer-button').click(function () {
                    $newAnswerForm.remove();
                });
            }

            $answerContainer.append($newAnswerForm);
        }



        $('.add-question-button').click(function () {
            addQuestion();
        });

        $('#finish').on('click', function () {

            const formData = new FormData();

            formData.append('TestId', @ViewBag.TestId);

            const questionForms = document.querySelectorAll('.question');
            questionForms.forEach((form, index) => {
                const instructionElement = form.querySelector('input[name="instruction"]');
                const textElement = form.querySelector('input[name="text"]');
                const imageElement = form.querySelector('input[name="image"]');
                const pointEl = form.querySelector('input[name="point"]');

                if (instructionElement) formData.append(`Questions[${index}].Instruction`, instructionElement.value);
                if (textElement) formData.append(`Questions[${index}].Text`, textElement.value);
                if (imageElement && imageElement.files && imageElement.files.length > 0) {
                    formData.append(`Questions[${index}].Image`, imageElement.files[0]);
                }
                if (pointEl) {
                    formData.append(`Questions[${index}].Point`, pointEl.value);
                }

                const answerForms = form.querySelectorAll('.answers .answer');
                answerForms.forEach((answerForm, answerIndex) => {
                    const answerTextElement = answerForm.querySelector('input[name="answerText"]');
                    const answerImageElement = answerForm.querySelector('input[name="answerImage"]');
                    const isCorrectElement = answerForm.querySelector('input.isCorrect'); // Use class selector

                    if (answerTextElement) formData.append(`Questions[${index}].Answers[${answerIndex}].AnswerText`, answerTextElement.value);
                    if (answerImageElement && answerImageElement.files && answerImageElement.files.length > 0) {
                        formData.append(`Questions[${index}].Answers[${answerIndex}].AnswerImage`, answerImageElement.files[0]);
                    }
                    if (isCorrectElement) formData.append(`Questions[${index}].Answers[${answerIndex}].IsCorrect`, isCorrectElement.checked);
                });
            });
            console.log(formData);
            axios.post('/Admin/ORT/CreateQuestions', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            })
            .then(function (response) {
                window.location.href = `@Url.Action("Details", "ORT", new {ortId = ViewBag.OrtId})`;
            })
            .catch(function (error) {
                console.error('Error: 963', error);
            });
    });
            
   

        // Bind validation to input events on the current page
        addQuestion();
    });
</script>