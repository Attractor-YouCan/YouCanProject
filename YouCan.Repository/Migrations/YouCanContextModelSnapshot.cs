// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YouCan.Repository;

#nullable disable

namespace YouCan.Repository.Migrations
{
    [DbContext(typeof(YouCanContext))]
    partial class YouCanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 4,
                            Name = "prouser",
                            NormalizedName = "PROUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YouCan.Entites.Models.AdminAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecuteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdminActions");
                });

            modelBuilder.Entity("YouCan.Entites.Models.LessonTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("TimeSpent")
                        .HasColumnType("interval");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonTimes");
                });

            modelBuilder.Entity("YouCan.Entites.Models.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Start",
                            Price = 0
                        },
                        new
                        {
                            Id = 2,
                            Duration = 1,
                            Name = "Pro",
                            Price = 1
                        },
                        new
                        {
                            Id = 3,
                            Duration = 3,
                            Name = "Premium",
                            Price = 2
                        });
                });

            modelBuilder.Entity("YouCan.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            Content = "ве...ти концерт",
                            IsCorrect = true,
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 14,
                            Content = "ве...ти груз",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 15,
                            Content = "ни...кая температура",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 16,
                            Content = "передвигались пол...ком",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 17,
                            Content = "Лето будет жаркое и (сухое).",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 18,
                            Content = "Надо купить пакет (сухого) молока.",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 19,
                            Content = "Матч закончился с (сухим) счетом.",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 20,
                            Content = "В ванной висит (сухое) полотенце",
                            IsCorrect = true,
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 21,
                            Content = "в...рыхлённый граблями",
                            IsCorrect = true,
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 22,
                            Content = "в...копанный огород",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 23,
                            Content = "в...порхнувший с ветки",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 24,
                            Content = "в...тавленный в текст",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 25,
                            Content = "Слева стояли такие высокие здания, что мимо (их) проплывали облака.",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 26,
                            Content = "Впереди шла стройная женщина, а позади (её) бежал малыш.",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 27,
                            Content = "На углу улицы я увидел мальчика, возле (его) стояла корзина с цветами.",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 28,
                            Content = "Когда Мурат свернул на шоссе, то увидел, что навстречу (ему) медленно движется колонна машин.",
                            IsCorrect = true,
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 29,
                            Content = "выполняющееся",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 30,
                            Content = "выполняемое",
                            IsCorrect = true,
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 31,
                            Content = "выполненное",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 32,
                            Content = "выполнявшееся",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 33,
                            Content = "прекрасный",
                            IsCorrect = true,
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 34,
                            Content = "ужасный",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 35,
                            Content = "быстрый",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 36,
                            Content = "медленный",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 37,
                            Content = "низкий",
                            IsCorrect = true,
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 38,
                            Content = "высокий",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 39,
                            Content = "широкий",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 40,
                            Content = "длинный",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 41,
                            Content = "бежать",
                            IsCorrect = true,
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 42,
                            Content = "дерево",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 43,
                            Content = "красный",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 44,
                            Content = "медленно",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 45,
                            Content = "стол",
                            IsCorrect = true,
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 46,
                            Content = "быстро",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 47,
                            Content = "играть",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 48,
                            Content = "красивый",
                            IsCorrect = false,
                            QuestionId = 15
                        });
                });

            modelBuilder.Entity("YouCan.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("integer");

                    b.Property<int>("MinPoints")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Leagues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LeagueName = "Bronze",
                            MaxPoints = 999,
                            MinPoints = 0
                        },
                        new
                        {
                            Id = 2,
                            LeagueName = "Silver",
                            MaxPoints = 1999,
                            MinPoints = 1000
                        },
                        new
                        {
                            Id = 3,
                            LeagueName = "Gold",
                            MaxPoints = 2999,
                            MinPoints = 2000
                        },
                        new
                        {
                            Id = 4,
                            LeagueName = "Platinum",
                            MaxPoints = 3999,
                            MinPoints = 3000
                        },
                        new
                        {
                            Id = 5,
                            LeagueName = "Diamond",
                            MaxPoints = 2147483647,
                            MinPoints = 4000
                        });
                });

            modelBuilder.Entity("YouCan.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Lecture")
                        .HasColumnType("text");

                    b.Property<int?>("LessonLevel")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("YouCan.Entities.LessonModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonModule");
                });

            modelBuilder.Entity("YouCan.Entities.OrtInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionsCount")
                        .HasColumnType("integer");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeInMin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrtInstructions");
                });

            modelBuilder.Entity("YouCan.Entities.OrtTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrtLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeForTestInMin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrtTests");
                });

            modelBuilder.Entity("YouCan.Entities.PassedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("PassedQuestions");
                });

            modelBuilder.Entity("YouCan.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AnswersIsImage")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Instruction")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("Point")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            AnswersIsImage = false,
                            Content = "В каком слове вместо точек следует вставить букву с?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 8,
                            AnswersIsImage = false,
                            Content = "В каком предложении подчеркнутое слово можно заменить словом (высохший (-ая, -ее))?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 9,
                            AnswersIsImage = false,
                            Content = "В каком слове вместо точек следует вставить букву з?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 10,
                            AnswersIsImage = false,
                            Content = "В каком предложении подчеркнутое слово употреблено в правильной форме?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 11,
                            AnswersIsImage = false,
                            Content = "Задание, ... нами, не вызывает особых затруднений.",
                            Instruction = "Какое слово следует вставить вместо точек в предложение?",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 12,
                            AnswersIsImage = false,
                            Content = "Какое слово является синонимом к слову 'красивый'?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 13,
                            AnswersIsImage = false,
                            Content = "Какое слово является антонимом к слову 'высокий'?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 14,
                            AnswersIsImage = false,
                            Content = "Какое слово является глаголом?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 15,
                            AnswersIsImage = false,
                            Content = "Какое слово обозначает предмет?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        });
                });

            modelBuilder.Entity("YouCan.Entities.QuestionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionReports");
                });

            modelBuilder.Entity("YouCan.Entities.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Streak")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StudyMinutes")
                        .HasColumnType("interval");

                    b.Property<int>("TotalExperience")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("YouCan.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectType")
                        .HasColumnType("integer");

                    b.Property<int>("UserTestType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/topicImages/mathematics1icon.png",
                            Name = "Mathematics",
                            SubjectType = 0,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/topicImages/grammarIcon.png",
                            Name = "Russian",
                            SubjectType = 0,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/topicImages/mathematics1icon.png",
                            Name = "Mathematics1",
                            ParentId = 1,
                            SubjectType = 1,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/topicImages/mathematics2icon.png",
                            Name = "Mathematics2",
                            ParentId = 1,
                            SubjectType = 1,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "/topicImages/analogyIcon.png",
                            Name = "Analogy",
                            ParentId = 2,
                            SubjectType = 0,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "/topicImages/grammarIcon.png",
                            Name = "Grammar",
                            ParentId = 2,
                            SubjectType = 1,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "/topicImages/readUnderstIcon.png",
                            Name = "Reading and Understanding",
                            ParentId = 2,
                            SubjectType = 1,
                            UserTestType = 1
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "/topicImages/analogyIcon.png",
                            Name = "Analogy",
                            ParentId = 5,
                            SubjectType = 1,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "/topicImages/readUnderstIcon.png",
                            Name = "Addition of Offers",
                            ParentId = 5,
                            SubjectType = 1,
                            UserTestType = 0
                        });
                });

            modelBuilder.Entity("YouCan.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GainingExperience")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrtInstructionId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrtTestId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int?>("TimeForTestInMin")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("OrtInstructionId")
                        .IsUnique();

                    b.HasIndex("OrtTestId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            GainingExperience = 0,
                            IsPublished = false,
                            SubjectId = 6
                        });
                });

            modelBuilder.Entity("YouCan.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Disctrict")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TariffEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TariffId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TariffStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("UserLessonScore")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TariffId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("YouCan.Entities.UserLessons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int?>("PassedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLessons");
                });

            modelBuilder.Entity("YouCan.Entities.UserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLevels");
                });

            modelBuilder.Entity("YouCan.Entities.UserOrtTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int?>("OrtTestId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PassedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PassedLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("PassedTimeInMin")
                        .HasColumnType("integer");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrtTestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserORTTests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YouCan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YouCan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YouCan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YouCan.Entites.Models.AdminAction", b =>
                {
                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entites.Models.LessonTime", b =>
                {
                    b.HasOne("YouCan.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.Answer", b =>
                {
                    b.HasOne("YouCan.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("YouCan.Entities.Lesson", b =>
                {
                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("YouCan.Entities.LessonModule", b =>
                {
                    b.HasOne("YouCan.Entities.Lesson", "Lesson")
                        .WithMany("LessonModules")
                        .HasForeignKey("LessonId");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("YouCan.Entities.PassedQuestion", b =>
                {
                    b.HasOne("YouCan.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.Question", b =>
                {
                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("YouCan.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId");

                    b.Navigation("Subject");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.QuestionReport", b =>
                {
                    b.HasOne("YouCan.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.Statistic", b =>
                {
                    b.HasOne("YouCan.Entities.User", "User")
                        .WithOne("Statistic")
                        .HasForeignKey("YouCan.Entities.Statistic", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.Subject", b =>
                {
                    b.HasOne("YouCan.Entities.Subject", "Parent")
                        .WithMany("SubSubjects")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("YouCan.Entities.Test", b =>
                {
                    b.HasOne("YouCan.Entities.Lesson", "Lesson")
                        .WithMany("Tests")
                        .HasForeignKey("LessonId");

                    b.HasOne("YouCan.Entities.OrtInstruction", "OrtInstruction")
                        .WithOne("Test")
                        .HasForeignKey("YouCan.Entities.Test", "OrtInstructionId");

                    b.HasOne("YouCan.Entities.OrtTest", "OrtTest")
                        .WithMany("Tests")
                        .HasForeignKey("OrtTestId");

                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Lesson");

                    b.Navigation("OrtInstruction");

                    b.Navigation("OrtTest");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.User", b =>
                {
                    b.HasOne("YouCan.Entities.League", "League")
                        .WithMany("Users")
                        .HasForeignKey("LeagueId");

                    b.HasOne("YouCan.Entites.Models.Tariff", "Tariff")
                        .WithMany("Users")
                        .HasForeignKey("TariffId");

                    b.Navigation("League");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("YouCan.Entities.UserLessons", b =>
                {
                    b.HasOne("YouCan.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("Lessons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.UserLevel", b =>
                {
                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("UserLevels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.UserOrtTest", b =>
                {
                    b.HasOne("YouCan.Entities.OrtTest", "OrtTest")
                        .WithMany()
                        .HasForeignKey("OrtTestId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrtTest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entites.Models.Tariff", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("YouCan.Entities.League", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("YouCan.Entities.Lesson", b =>
                {
                    b.Navigation("LessonModules");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("YouCan.Entities.OrtInstruction", b =>
                {
                    b.Navigation("Test");
                });

            modelBuilder.Entity("YouCan.Entities.OrtTest", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("YouCan.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("YouCan.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("SubSubjects");
                });

            modelBuilder.Entity("YouCan.Entities.Test", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("YouCan.Entities.User", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Questions");

                    b.Navigation("Statistic");

                    b.Navigation("Tests");

                    b.Navigation("UserLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
