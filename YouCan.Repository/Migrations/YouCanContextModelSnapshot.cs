// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YouCan.Repository;

#nullable disable

namespace YouCan.Repository.Migrations
{
    [DbContext(typeof(YouCanContext))]
    partial class YouCanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 4,
                            Name = "prouser",
                            NormalizedName = "PROUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExperiences");
                });

            modelBuilder.Entity("YouCan.Entites.Models.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Start",
                            Price = 0
                        },
                        new
                        {
                            Id = 2,
                            Duration = 1,
                            Name = "Pro",
                            Price = 1
                        },
                        new
                        {
                            Id = 3,
                            Duration = 3,
                            Name = "Premium",
                            Price = 2
                        });
                });

            modelBuilder.Entity("YouCan.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "A больше",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "B больше",
                            IsCorrect = true,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = " оба равны",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "нельзя сравнить",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Площадь под функции f(x)",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "интеграл от f(x) от 0 до x",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "Функция, производная которой равна f(x)",
                            IsCorrect = true,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Функция, производная которой равна Y(f-k)",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Грамматика это чудо",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Content = "Грамматика это таска",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Content = "Грамматика это пипец",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "Грамматика это 5 по русскому",
                            IsCorrect = true,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 69,
                            Content = "Грамматика это чудо",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 70,
                            Content = "Грамматика это таска",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 71,
                            Content = "Грамматика это пипец",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 72,
                            Content = "Грамматика это 5 по русскому",
                            IsCorrect = true,
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 73,
                            Content = "A больше",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 74,
                            Content = "B больше",
                            IsCorrect = true,
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 75,
                            Content = " оба равны",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 76,
                            Content = "нельзя сравнить",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 77,
                            Content = "Площадь под функции f(x)",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 78,
                            Content = "интеграл от f(x) от 0 до x",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 79,
                            Content = "Функция, производная которой равна f(x)",
                            IsCorrect = true,
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 80,
                            Content = "Функция, производная которой равна Y(f-k)",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 81,
                            Content = "Грамматика это чудо",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 82,
                            Content = "Грамматика это таска",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 83,
                            Content = "Грамматика это пипец",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 84,
                            Content = "Грамматика это 5 по русскому",
                            IsCorrect = true,
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 49,
                            Content = "A больше",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 50,
                            Content = "B больше",
                            IsCorrect = true,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 51,
                            Content = " оба равны",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 52,
                            Content = "нельзя сравнить",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 53,
                            Content = "Площадь под функции f(x)",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 54,
                            Content = "интеграл от f(x) от 0 до x",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 55,
                            Content = "Функция, производная которой равна f(x)",
                            IsCorrect = true,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 56,
                            Content = "Функция, производная которой равна Y(f-k)",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 57,
                            Content = "Грамматика это чудо",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 58,
                            Content = "Грамматика это таска",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 59,
                            Content = "Грамматика это пипец",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 60,
                            Content = "Грамматика это 5 по русскому",
                            IsCorrect = true,
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 61,
                            Content = "A больше",
                            IsCorrect = false,
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 62,
                            Content = "B больше",
                            IsCorrect = true,
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 63,
                            Content = " оба равны",
                            IsCorrect = false,
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 64,
                            Content = "нельзя сравнить",
                            IsCorrect = false,
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 65,
                            Content = "Площадь под функции f(x)",
                            IsCorrect = false,
                            QuestionId = 21
                        },
                        new
                        {
                            Id = 66,
                            Content = "интеграл от f(x) от 0 до x",
                            IsCorrect = false,
                            QuestionId = 21
                        },
                        new
                        {
                            Id = 67,
                            Content = "Функция, производная которой равна f(x)",
                            IsCorrect = true,
                            QuestionId = 21
                        },
                        new
                        {
                            Id = 68,
                            Content = "Функция, производная которой равна Y(f-k)",
                            IsCorrect = false,
                            QuestionId = 21
                        },
                        new
                        {
                            Id = 13,
                            Content = "ве...ти концерт",
                            IsCorrect = true,
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 14,
                            Content = "ве...ти груз",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 15,
                            Content = "ни...кая температура",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 16,
                            Content = "передвигались пол...ком",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 17,
                            Content = "Лето будет жаркое и (сухое).",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 18,
                            Content = "Надо купить пакет (сухого) молока.",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 19,
                            Content = "Матч закончился с (сухим) счетом.",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 20,
                            Content = "В ванной висит (сухое) полотенце",
                            IsCorrect = true,
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 21,
                            Content = "в...рыхлённый граблями",
                            IsCorrect = true,
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 22,
                            Content = "в...копанный огород",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 23,
                            Content = "в...порхнувший с ветки",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 24,
                            Content = "в...тавленный в текст",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 25,
                            Content = "Слева стояли такие высокие здания, что мимо (их) проплывали облака.",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 26,
                            Content = "Впереди шла стройная женщина, а позади (её) бежал малыш.",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 27,
                            Content = "На углу улицы я увидел мальчика, возле (его) стояла корзина с цветами.",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 28,
                            Content = "Когда Мурат свернул на шоссе, то увидел, что навстречу (ему) медленно движется колонна машин.",
                            IsCorrect = true,
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 29,
                            Content = "выполняющееся",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 30,
                            Content = "выполняемое",
                            IsCorrect = true,
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 31,
                            Content = "выполненное",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 32,
                            Content = "выполнявшееся",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 33,
                            Content = "прекрасный",
                            IsCorrect = true,
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 34,
                            Content = "ужасный",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 35,
                            Content = "быстрый",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 36,
                            Content = "медленный",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 37,
                            Content = "низкий",
                            IsCorrect = true,
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 38,
                            Content = "высокий",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 39,
                            Content = "широкий",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 40,
                            Content = "длинный",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 41,
                            Content = "бежать",
                            IsCorrect = true,
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 42,
                            Content = "дерево",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 43,
                            Content = "красный",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 44,
                            Content = "медленно",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 45,
                            Content = "стол",
                            IsCorrect = true,
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 46,
                            Content = "быстро",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 47,
                            Content = "играть",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 48,
                            Content = "красивый",
                            IsCorrect = false,
                            QuestionId = 15
                        });
                });

            modelBuilder.Entity("YouCan.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Lecture")
                        .HasColumnType("text");

                    b.Property<int?>("LessonLevel")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubtopicId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubtopicId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 1,
                            RequiredLevel = 0,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 2,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 2,
                            RequiredLevel = 1,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 3,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 3,
                            RequiredLevel = 2,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 4,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 4,
                            RequiredLevel = 3,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 5,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 5,
                            RequiredLevel = 4,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 6,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 6,
                            RequiredLevel = 5,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 7,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 7,
                            RequiredLevel = 6,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 8,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 8,
                            RequiredLevel = 7,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 9,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 9,
                            RequiredLevel = 8,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 10,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 10,
                            RequiredLevel = 9,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 11,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 11,
                            RequiredLevel = 10,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 12,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 1,
                            RequiredLevel = 0,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 13,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 2,
                            RequiredLevel = 1,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 14,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 3,
                            RequiredLevel = 2,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 15,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 4,
                            RequiredLevel = 3,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 16,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 5,
                            RequiredLevel = 4,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 17,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 6,
                            RequiredLevel = 5,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 18,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 7,
                            RequiredLevel = 6,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 19,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 8,
                            RequiredLevel = 7,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 20,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 9,
                            RequiredLevel = 8,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 21,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 10,
                            RequiredLevel = 9,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 22,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 11,
                            RequiredLevel = 10,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubjectId = 3,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        });
                });

            modelBuilder.Entity("YouCan.Entities.LessonModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonModule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "1. ∫a dx = ax + C 2. ∫x^n dx = (x^(n+1))/(n+1) + C\r\n\r\n3. ∫e^x dx = e^x + C\r\n\r\n4. ∫sin(x) dx = -cos(x) + C\r\n\r\n5. ∫cos(x) dx = sin(x) + C",
                            LessonId = 12,
                            Title = "Основные формулы"
                        },
                        new
                        {
                            Id = 2,
                            Content = "<p>1. ∫a dx = ax + C</p><p>2. ∫x^n dx = (x^(n+1))/(n+1) + C</p><p>3. ∫e^x dx = e^x + C</p><p>4. ∫sin(x) dx = -cos(x) + C</p><p>5. ∫cos(x) dx = sin(x) + C</p>",
                            LessonId = 12,
                            Title = "Основные формулы"
                        },
                        new
                        {
                            Id = 3,
                            Content = "<p>1. ∫a dx = ax + C</p><p>2. ∫x^n dx = (x^(n+1))/(n+1) + C</p><p>3. ∫e^x dx = e^x + C</p><p>4. ∫sin(x) dx = -cos(x) + C</p><p>5. ∫cos(x) dx = sin(x) + C</p>",
                            LessonId = 12,
                            PhotoUrl = "/studyImages/Screenshot_1.png",
                            Title = "Основные формулы"
                        });
                });

            modelBuilder.Entity("YouCan.Entities.OrtInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionsCount")
                        .HasColumnType("integer");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeInMin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrtInstructions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Добро пожаловать на предметный тест по Математике. Тест состоит из 40 заданий, на выполнение которых отводится 80 минут. Во время выполнения заданий Вы можете изменить выбранный вариант ответа, но сделать это можно только один раз для каждого задания. При исправлении новый (правильный) ответ будет представлен квадратиком. После прохождения теста Вы получите результат, в котором будет указано количество данных Вами правильных ответов и общий процент правильно и неправильно выполненных заданий. Желаем удачи!",
                            QuestionsCount = 40,
                            TimeInMin = 80
                        },
                        new
                        {
                            Id = 2,
                            Description = "Добро пожаловать на предметный тест по Аналогиям и дополнениям . Тест состоит из 30 заданий, на выполнение которых отводится 30 минут. Во время выполнения заданий Вы можете изменить выбранный вариант ответа, но сделать это можно только один раз для каждого задания. При исправлении новый (правильный) ответ будет представлен квадратиком. После прохождения теста Вы получите результат, в котором будет указано количество данных Вами правильных ответов и общий процент правильно и неправильно выполненных заданий. Желаем удачи!",
                            QuestionsCount = 30,
                            TimeInMin = 70
                        },
                        new
                        {
                            Id = 3,
                            Description = "Добро пожаловать на предметный тест по Чтению и пониманию. Тест состоит из 30 заданий, на выполнение которых отводится 35 минут. Во время выполнения заданий Вы можете изменить выбранный вариант ответа, но сделать это можно только один раз для каждого задания. При исправлении новый (правильный) ответ будет представлен квадратиком. После прохождения теста Вы получите результат, в котором будет указано количество данных Вами правильных ответов и общий процент правильно и неправильно выполненных заданий. Желаем удачи!",
                            QuestionsCount = 30,
                            TimeInMin = 60
                        },
                        new
                        {
                            Id = 4,
                            Description = "Добро пожаловать на предметный тест по Практической грамматике. Тест состоит из 30 заданий, на выполнение которых отводится 35 минут. Во время выполнения заданий Вы можете изменить выбранный вариант ответа, но сделать это можно только один раз для каждого задания. При исправлении новый (правильный) ответ будет представлен квадратиком. После прохождения теста Вы получите результат, в котором будет указано количество данных Вами правильных ответов и общий процент правильно и неправильно выполненных заданий. Желаем удачи!",
                            QuestionsCount = 30,
                            TimeInMin = 50
                        });
                });

            modelBuilder.Entity("YouCan.Entities.OrtTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrtLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeForTestInMin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrtTests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = "ru",
                            OrtLevel = 1
                        },
                        new
                        {
                            Id = 2,
                            Language = "ru",
                            OrtLevel = 2
                        },
                        new
                        {
                            Id = 3,
                            Language = "ru",
                            OrtLevel = 3
                        },
                        new
                        {
                            Id = 4,
                            Language = "ru",
                            OrtLevel = 4
                        },
                        new
                        {
                            Id = 5,
                            Language = "ru",
                            OrtLevel = 5
                        },
                        new
                        {
                            Id = 6,
                            Language = "ru",
                            OrtLevel = 6
                        },
                        new
                        {
                            Id = 7,
                            Language = "ru",
                            OrtLevel = 7
                        },
                        new
                        {
                            Id = 8,
                            Language = "ru",
                            OrtLevel = 8
                        },
                        new
                        {
                            Id = 9,
                            Language = "ru",
                            OrtLevel = 9
                        });
                });

            modelBuilder.Entity("YouCan.Entities.PassedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("PassedQuestions");
                });

            modelBuilder.Entity("YouCan.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AnswersIsImage")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Instruction")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("Point")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswersIsImage = false,
                            Content = "23 : 34",
                            Instruction = "Что больше?",
                            IsPublished = false,
                            Point = 2,
                            TestId = 1,
                            Type = "analogy"
                        },
                        new
                        {
                            Id = 2,
                            AnswersIsImage = false,
                            Content = "Что такое интеграл?",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            Point = 2,
                            TestId = 1,
                            Type = "general"
                        },
                        new
                        {
                            Id = 3,
                            AnswersIsImage = false,
                            Content = "Грамматика это___",
                            Instruction = "Отметьте вариант, наиболее близкий к контрольной паре",
                            IsPublished = false,
                            Point = 3,
                            TestId = 1,
                            Type = "general"
                        },
                        new
                        {
                            Id = 4,
                            AnswersIsImage = false,
                            Content = "Птица : Гнездо",
                            Instruction = "Отметьте вариант, наиболее близкий к контрольной паре",
                            IsPublished = false,
                            Point = 3,
                            TestId = 2,
                            Type = "analogy"
                        },
                        new
                        {
                            Id = 5,
                            AnswersIsImage = false,
                            Content = "Что такое интеграл?",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            Point = 2,
                            TestId = 2,
                            Type = "general"
                        },
                        new
                        {
                            Id = 6,
                            AnswersIsImage = false,
                            Content = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            Point = 2,
                            TestId = 2,
                            Type = "general"
                        },
                        new
                        {
                            Id = 18,
                            AnswersIsImage = false,
                            Content = "23 : 34",
                            Instruction = "Что больше?",
                            IsPublished = false,
                            Point = 3,
                            TestId = 4,
                            Type = "analogy"
                        },
                        new
                        {
                            Id = 19,
                            AnswersIsImage = false,
                            Content = "Что такое интеграл?",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            Point = 3,
                            TestId = 4,
                            Type = "general"
                        },
                        new
                        {
                            Id = 20,
                            AnswersIsImage = false,
                            Content = "Грамматика это___",
                            Instruction = "Отметьте вариант, наиболее близкий к контрольной паре",
                            IsPublished = false,
                            Point = 2,
                            TestId = 4,
                            Type = "general"
                        },
                        new
                        {
                            Id = 21,
                            AnswersIsImage = false,
                            Content = "Птица : Гнездо",
                            Instruction = "Отметьте вариант, наиболее близкий к контрольной паре",
                            IsPublished = false,
                            Point = 2,
                            TestId = 5,
                            Type = "analogy"
                        },
                        new
                        {
                            Id = 16,
                            AnswersIsImage = false,
                            Content = "Что такое интеграл?",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            Point = 3,
                            TestId = 5,
                            Type = "general"
                        },
                        new
                        {
                            Id = 17,
                            AnswersIsImage = false,
                            Content = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            Point = 3,
                            TestId = 5,
                            Type = "general"
                        },
                        new
                        {
                            Id = 7,
                            AnswersIsImage = false,
                            Content = "В каком слове вместо точек следует вставить букву с?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 8,
                            AnswersIsImage = false,
                            Content = "В каком предложении подчеркнутое слово можно заменить словом (высохший (-ая, -ее))?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 9,
                            AnswersIsImage = false,
                            Content = "В каком слове вместо точек следует вставить букву з?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 10,
                            AnswersIsImage = false,
                            Content = "В каком предложении подчеркнутое слово употреблено в правильной форме?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 11,
                            AnswersIsImage = false,
                            Content = "Задание, ... нами, не вызывает особых затруднений.",
                            Instruction = "Какое слово следует вставить вместо точек в предложение?",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 12,
                            AnswersIsImage = false,
                            Content = "Какое слово является синонимом к слову 'красивый'?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 13,
                            AnswersIsImage = false,
                            Content = "Какое слово является антонимом к слову 'высокий'?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 14,
                            AnswersIsImage = false,
                            Content = "Какое слово является глаголом?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        },
                        new
                        {
                            Id = 15,
                            AnswersIsImage = false,
                            Content = "Какое слово обозначает предмет?",
                            Instruction = "Выберите правильный вариант",
                            IsPublished = false,
                            TestId = 3
                        });
                });

            modelBuilder.Entity("YouCan.Entities.QuestionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionReports");
                });

            modelBuilder.Entity("YouCan.Entities.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Streak")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StudyMinutes")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("YouCan.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectType")
                        .HasColumnType("integer");

                    b.Property<int>("UserTestType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/topicImages/mathematics1icon.png",
                            Name = "Mathematics",
                            SubjectType = 0,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/topicImages/grammarIcon.png",
                            Name = "Russian",
                            SubjectType = 0,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/topicImages/mathematics1icon.png",
                            Name = "Mathematics1",
                            ParentId = 1,
                            SubjectType = 1,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/topicImages/mathematics2icon.png",
                            Name = "Mathematics2",
                            ParentId = 1,
                            SubjectType = 1,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "/topicImages/analogyIcon.png",
                            Name = "Analogy",
                            ParentId = 2,
                            SubjectType = 0,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "/topicImages/grammarIcon.png",
                            Name = "Grammar",
                            ParentId = 2,
                            SubjectType = 1,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "/topicImages/readUnderstIcon.png",
                            Name = "Reading and Understanding",
                            ParentId = 2,
                            SubjectType = 1,
                            UserTestType = 1
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "/topicImages/analogyIcon.png",
                            Name = "Analogy",
                            ParentId = 5,
                            SubjectType = 1,
                            UserTestType = 0
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "/topicImages/readUnderstIcon.png",
                            Name = "Addition of Offers",
                            ParentId = 5,
                            SubjectType = 1,
                            UserTestType = 0
                        });
                });

            modelBuilder.Entity("YouCan.Entities.Subtopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Subtopics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/topicImages/mathematics1icon.png",
                            Name = "Mathematics1",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/topicImages/mathematics2icon.png",
                            Name = "Mathematics2",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/topicImages/analogyIcon.png",
                            Name = "Analogy",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/topicImages/grammarIcon.png",
                            Name = "Grammar",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "/topicImages/readUnderstIcon.png",
                            Name = "Reading and Understanding",
                            TopicId = 2
                        });
                });

            modelBuilder.Entity("YouCan.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GainingExperience")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrtInstructionId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrtTestId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int?>("TimeForTestInMin")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("OrtInstructionId")
                        .IsUnique();

                    b.HasIndex("OrtTestId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GainingExperience = 0,
                            IsPublished = false,
                            LessonId = 12,
                            OrtInstructionId = 1,
                            OrtTestId = 1,
                            SubjectId = 1,
                            TimeForTestInMin = 40
                        },
                        new
                        {
                            Id = 2,
                            GainingExperience = 0,
                            IsPublished = false,
                            LessonId = 13,
                            OrtInstructionId = 2,
                            OrtTestId = 1,
                            SubjectId = 5,
                            TimeForTestInMin = 40
                        },
                        new
                        {
                            Id = 4,
                            GainingExperience = 0,
                            IsPublished = false,
                            OrtInstructionId = 3,
                            OrtTestId = 1,
                            SubjectId = 7,
                            TimeForTestInMin = 30
                        },
                        new
                        {
                            Id = 5,
                            GainingExperience = 0,
                            IsPublished = false,
                            OrtInstructionId = 4,
                            OrtTestId = 1,
                            SubjectId = 2,
                            TimeForTestInMin = 30
                        },
                        new
                        {
                            Id = 3,
                            GainingExperience = 0,
                            IsPublished = false,
                            SubjectId = 6
                        });
                });

            modelBuilder.Entity("YouCan.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("YouCan.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Disctrict")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("StatisticId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TariffEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TariffId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("UserLessonScore")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StatisticId");

                    b.HasIndex("TariffId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("YouCan.Entities.UserLessons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int?>("PassedLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubtopicId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubtopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLessons");
                });

            modelBuilder.Entity("YouCan.Entities.UserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLevels");
                });

            modelBuilder.Entity("YouCan.Entities.UserOrtTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int?>("OrtTestId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PassedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PassedLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("PassedTimeInMin")
                        .HasColumnType("integer");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrtTestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserORTTests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YouCan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YouCan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YouCan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserExperience", b =>
                {
                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("UserExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.Answer", b =>
                {
                    b.HasOne("YouCan.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("YouCan.Entities.Lesson", b =>
                {
                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId");

                    b.HasOne("YouCan.Entities.Subtopic", "Subtopic")
                        .WithMany("Lessons")
                        .HasForeignKey("SubtopicId");

                    b.Navigation("Subject");

                    b.Navigation("Subtopic");
                });

            modelBuilder.Entity("YouCan.Entities.LessonModule", b =>
                {
                    b.HasOne("YouCan.Entities.Lesson", "Lesson")
                        .WithMany("LessonModules")
                        .HasForeignKey("LessonId");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("YouCan.Entities.PassedQuestion", b =>
                {
                    b.HasOne("YouCan.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.Question", b =>
                {
                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("YouCan.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId");

                    b.Navigation("Subject");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.QuestionReport", b =>
                {
                    b.HasOne("YouCan.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.Subject", b =>
                {
                    b.HasOne("YouCan.Entities.Subject", "Parent")
                        .WithMany("SubSubjects")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("YouCan.Entities.Subtopic", b =>
                {
                    b.HasOne("YouCan.Entities.Topic", "Topic")
                        .WithMany("Subtopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("YouCan.Entities.Test", b =>
                {
                    b.HasOne("YouCan.Entities.Lesson", "Lesson")
                        .WithMany("Tests")
                        .HasForeignKey("LessonId");

                    b.HasOne("YouCan.Entities.OrtInstruction", "OrtInstruction")
                        .WithOne("Test")
                        .HasForeignKey("YouCan.Entities.Test", "OrtInstructionId");

                    b.HasOne("YouCan.Entities.OrtTest", "OrtTest")
                        .WithMany("Tests")
                        .HasForeignKey("OrtTestId");

                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Lesson");

                    b.Navigation("OrtInstruction");

                    b.Navigation("OrtTest");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.User", b =>
                {
                    b.HasOne("YouCan.Entities.Statistic", "Statistic")
                        .WithMany()
                        .HasForeignKey("StatisticId");

                    b.HasOne("YouCan.Entites.Models.Tariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId");

                    b.Navigation("Statistic");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("YouCan.Entities.UserLessons", b =>
                {
                    b.HasOne("YouCan.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("YouCan.Entities.Subtopic", "Subtopic")
                        .WithMany()
                        .HasForeignKey("SubtopicId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("Lessons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Subject");

                    b.Navigation("Subtopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.UserLevel", b =>
                {
                    b.HasOne("YouCan.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("UserLevels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.UserOrtTest", b =>
                {
                    b.HasOne("YouCan.Entities.OrtTest", "OrtTest")
                        .WithMany()
                        .HasForeignKey("OrtTestId");

                    b.HasOne("YouCan.Entities.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrtTest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Entities.Lesson", b =>
                {
                    b.Navigation("LessonModules");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("YouCan.Entities.OrtInstruction", b =>
                {
                    b.Navigation("Test");
                });

            modelBuilder.Entity("YouCan.Entities.OrtTest", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("YouCan.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("YouCan.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("SubSubjects");
                });

            modelBuilder.Entity("YouCan.Entities.Subtopic", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("YouCan.Entities.Test", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("YouCan.Entities.Topic", b =>
                {
                    b.Navigation("Subtopics");
                });

            modelBuilder.Entity("YouCan.Entities.User", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Questions");

                    b.Navigation("Tests");

                    b.Navigation("UserExperiences");

                    b.Navigation("UserLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
