@model List<Test>

@{
    ViewBag.Title = "title";
    Layout = "_Navbar";
}

<link rel="stylesheet" href="~/css/lesson-test.css" asp-append-version="true"/>
<link rel="stylesheet" href="~/css/ortTest.css" asp-append-version="true"/>

<div class="top-layout">
    <a class="close-button" href="javascript:history.back()">
        <img src="~/topicImages/exitButton.svg">
    </a>
</div>

<div class="row row-cols-3 px-4 text-center mb-4 w-100 fixed-time-table">
    <div class="col-3" id="countdown">
        <span>00:00:00</span>
    </div>
    <div class="col-6">
        <button class="btn btn-finish text-white" id="next-page">Завершить
            <span id="finishTestName"></span></button>
    </div>
    <div class="col-3" id="total-countdown">
        <span>00:00:00</span>
    </div>
</div>

<div class="col-10 col-sm-8 col-md-6 mx-auto mt-5">
    @if (Model.Count == 0 || Model == null)
    {
        <h5>Тестов еще нет!</h5>
    }
    else
    {
        @for (int s = 0; s < Model.Count; s++)
        {
            Test test = Model[s];
            <div class="test-container" data-testId="@test.Id" data-testTime="@test.TimeForTestInMin" data-testName="@test.Subject.Name">
                @for (int t = 0; t < test.Questions.Count; t++)
                {
                    Question question = test.Questions[t];
                    int questionNum = s * 2 + t + 1 + s;
                    <div class="question-container text-center mt-4" data-questionId="@question.Id">
                        <span class="fw-bold fs-5">@($"{questionNum}.") &nbsp; @question.Instruction</span>
                        <div class="question mt-4">
                            @question.Content
                        </div>
                        @for (int i = 0; i < question.Answers.Count; i++)
                        {
                            Answer answer = question.Answers[i];
                            char answerNum = (char)('A' + i);
                            <label class="answer mt-4" role="button">
                                <span class="answer-number">@answerNum</span>
                                <span class="answer-content h-100 w-100">@answer.Content</span>
                            </label>
                        }
                    </div>
                }
            </div>
        }
        <div class="text-center my-5" id="pagination-container">
            <button class="btn btn-secondary py-2 px-1 px-lg-4" id="prev-page" disabled>Предыдущий</button>
            <span id="page-info"></span>
        </div>
    }
</div>

<button class="btn btn-outline-success text-success fixed-answers-button" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions">
    Ответы
</button>

<div class="offcanvas offcanvas-bottom h-50" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Ответы:</h5>
        <button type="button" class="btn btn-outline-success text-success ort-answers-btn" data-bs-dismiss="offcanvas" aria-label="Close">Вопросы</button>
    </div>
    <div class="offcanvas-body">
        <div class="answers-parent">
            <div class="answers header ms-1">
                @for (var answerIndex = 0; answerIndex < 5; answerIndex++)
                {
                    <span class="answer-@(answerIndex + 1)">
                        @if (Model.SelectMany(test => test.Questions).Any(question => question.Answers.Count > answerIndex))
                        {
                            @((char)('A' + answerIndex))
                        }
                    </span>
                }
            </div>
            @for (var i = 0; i < Model.Count; i++)
            {
                Test test = Model[i];
                @for (int t = 0; t < test.Questions.Count; t++)
                {
                    int questionNum = i * 2 + t + 1 + i;
                    Question question = test.Questions[t];
                    <div class="answers">
                        <span class="number">@questionNum</span>
                        @foreach (var answer in question.Answers)
                        {
                            <input type="radio" name="answer-@question.Id" value="@answer.Id" class="answer-radio">
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
    document.addEventListener("DOMContentLoaded", function () {
        const testContainers = document.querySelectorAll('.test-container');
        const countdownElement = document.getElementById('countdown');
        const finishTestName = document.getElementById('finishTestName');
        let timers = {};
        let timeSpent = [];
        let selectedAnswers = {};
        let currentPage = 1;
        let totalTestTime = 0;
        let selectionCounts = {};
    
        function initializeTimers() {
            totalTestTime = 0;
            testContainers.forEach(testContainer => {
                const testId = testContainer.dataset.testid;
                const testTime = parseInt(testContainer.dataset.testtime, 10) * 60;
                totalTestTime += testTime;
                timers[testId] = {
                    originalTime: testTime,
                    timeLeft: testTime,
                    interval: null
                };
            });
            updateTotalCountdown();
        }
    
        function formatTime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
        }
    
        function startTimer(testId) {
            if (timers[testId].interval) {
                clearInterval(timers[testId].interval);
            }
            timers[testId].interval = setInterval(function () {
                if (timers[testId].timeLeft <= 0) {
                    clearInterval(timers[testId].interval);
                    countdownElement.innerHTML = "Время вышло!";
                } else {
                    timers[testId].timeLeft--;
                    updateCountdown(testId);
                    updateTotalCountdown();
                }
            }, 1000);
        }
    
        function stopTimer(testId) {
            if (timers[testId].interval) {
                clearInterval(timers[testId].interval);
            }
        }
    
        function saveTimeSpent(testId) {
            const timer = timers[testId];
            const timeSpentTest = (timer.originalTime - timer.timeLeft);
            const existingEntry = timeSpent.find(entry => entry.testId === testId);
            if (existingEntry) {
                existingEntry.timeSpent = timeSpentTest;
            } else {
                timeSpent.push({ testId: testId, timeSpent: timeSpentTest });
            }
        }
    
        function updateCountdown(testId) {
            const testContainer = document.querySelector(`.test-container[data-testid="${testId}"]`);
            const testName = testContainer.dataset.testname;
            const timeLeft = timers[testId].timeLeft;
            countdownElement.innerHTML = `${formatTime(timeLeft)} <br> <span> ${testName} </span>`;
        }
    
        function updateTotalCountdown() {
            const totalTimeLeft = Object.values(timers).reduce((acc, timer) => acc + timer.timeLeft, 0);
            document.getElementById('total-countdown').innerHTML = `${formatTime(totalTimeLeft)} <br> <span>Общее время</span>`;
        }
    
        function updatePaginationButtonState() {
            document.getElementById('prev-page').disabled = currentPage === 1;
            const currentTestContainer = testContainers[currentPage - 1];
            const testNameForButton = currentTestContainer.dataset.testname;
            document.getElementById('next-page').textContent = 'Завершить ' + testNameForButton;
        }
    
        document.getElementById('prev-page').addEventListener('click', function () {
            if (currentPage > 1) {
                const currentTestId = testContainers[currentPage - 1].dataset.testid;
                stopTimer(currentTestId);
                currentPage--;
                renderTests();
            }
        });
    
        document.getElementById('next-page').addEventListener('click', function () {
            const totalTests = testContainers.length;
            const currentTestId = testContainers[currentPage - 1].dataset.testid;
            saveTimeSpent(currentTestId);
            stopTimer(currentTestId);
    
            if (currentPage < totalTests) {
                currentPage++;
                renderTests();
            } else {
                axios.post('@Url.Action("Index", "Tests")', {
                    selectedAnswers: Object.values(selectedAnswers),
                    timeSpent: timeSpent,
                    ortTestId: '@ViewBag.OrtTestId'
                })
                    .then(response => {
                        const ortTestResultModels = response.data.ortTestResultModels.$values;
                        if(Array.isArray(ortTestResultModels)){
                        const queryParams = new URLSearchParams();
                        ortTestResultModels.forEach((model, index) => {
                            queryParams.append(`ortTestResultModels[${index}].rightsCount`, model.rightsCount);
                            queryParams.append(`ortTestResultModels[${index}].questionCount`, model.questionCount);
                            queryParams.append(`ortTestResultModels[${index}].testId`, model.testId);
                            queryParams.append(`ortTestResultModels[${index}].spentTimeInMin`, model.spentTimeInMin);
                            queryParams.append(`ortTestResultModels[${index}].testPoints`, model.testPoints);
                            queryParams.append(`ortTestResultModels[${index}].pointsSum`, model.pointsSum);
                        });
                        window.location.href = `@Url.Action("Result", "Tests")?${queryParams.toString()}`;
                        }
                        else {
                            console.error('Expected ortTestResultModels to be an array, but got:', ortTestResultModels)
                        }
                    })
                    .catch(error => {
                        console.error('Error sending data:', error);
                    });
            }
        });
    
        function handleOffcanvasRadioClick(event) {
            const radio = event.target;
            const questionId = radio.name.split('-')[1];
            const testContainer = document.querySelector(`[data-questionid="${questionId}"]`).closest('.test-container');
            const testId = testContainer.dataset.testid;
            const questionContainer = radio.closest('.question-container');
    
            if (!selectionCounts[questionId]) {
                selectionCounts[questionId] = 0;
            }
    
            if (radio.checked) {
                selectedAnswers[radio.name] = {
                    testId: testId,
                    questionId: questionId,
                    answerId: radio.value
                };
                selectionCounts[questionId]++;
            }
    
            if (selectionCounts[questionId] === 2) {
                document.querySelectorAll(`[name="answer-${questionId}"]`).forEach(function (input) {
                    if (!input.checked) {
                        input.disabled = true;
                    }
                });
            } else if (selectionCounts[questionId] < 2) {
                document.querySelectorAll(`[name="answer-${questionId}"]`).forEach(function (input) {
                    input.disabled = false;
                });
            }
        }
    
        document.querySelectorAll('.answer-radio').forEach(function (radio) {
            radio.addEventListener('click', handleOffcanvasRadioClick);
        });
    
        initializeTimers();
        renderTests();
    
        function renderTests() {
            window.scrollTo(0, 0);
            testContainers.forEach(function (testContainer, index) {
                testContainer.style.display = (index === currentPage - 1) ? 'block' : 'none';
            });
            const testId = testContainers[currentPage - 1].dataset.testid;
            startTimer(testId);
            updatePaginationButtonState();
        }
    });

    </script>
}