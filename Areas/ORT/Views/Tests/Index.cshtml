@model List<Test>

@{
    ViewBag.Title = "title";
    Layout = "_Navbar";
}

<link rel="stylesheet" href="~/css/lesson-test.css" asp-append-version="true"/>
<link rel="stylesheet" href="~/css/ortTest.css" asp-append-version="true"/>

<div class="top-layout">
    <a class="close-button" href="javascript:history.back()">
        <img src="~/topicImages/exitButton.svg">
    </a>
</div>

<div class="row row-cols-3 px-4 text-center mb-4 w-100 fixed-time-table">
    <div class="col-3" id="countdown">
        <span>00:00:00</span>
    </div> <!-- Место для отображения таймера -->
    <div class="col-6">
        <button class="btn btn-danger text-white" id="next-page">Завершить 
            <span id="finishTestName"></span></button>
    </div>
    <div class="col-3" id="total-countdown">
        <span>00:00:00</span>
    </div> <!-- Место для отображения общего таймера -->
</div>



<div class="col-10 col-sm-8 col-md-6 mx-auto mt-5">
    @if (Model.Count == 0 || Model == null)
    {
        <h5>Тестов еще нет!</h5>
    }
    else
    {
        @for (int s = 0; s < Model.Count; s++)
        {
            Test test = Model[s];
            <div class="test-container" data-testId="@test.Id" data-testTime="@test.TimeForTestInMin" data-testName="@test.Subject.Name">
                @for (int t = 0; t < test.Questions.Count; t++)
                {
                    Question question = test.Questions[t];
                    int questionNum =  s * 2 + t +1 + s;
                    <div class="question-container text-center mt-4" data-questionId="@question.Id">
                        <span class="fw-bold fs-5">@($"{questionNum}.") &nbsp; @question.Instruction</span>
                        <div class="question mt-4">
                            @question.Content
                        </div>
                        @for (int i = 0; i < question.Answers.Count; i++)
                        {
                            Answer answer = question.Answers[i];
                            char answerNum = (char)('A' + i);
                            <label class="answer mt-4" role="button">
                                <input type="radio" name="answer-@question.Id" value="@answer.Id" class="answer-radio">
                                <span class="answer-number">@answerNum</span>
                                <span class="answer-content h-100 w-100">@answer.Text</span>
                            </label>
                        }
                    </div>
                }
            </div>
        }
        <div class="text-center my-5" id="pagination-container">
            <button class="btn btn-secondary py-2 px-1 px-lg-4" id="prev-page" disabled>Предыдущий</button>
            <span id="page-info"></span>
        </div>
    }
</div>

<button class="btn btn-outline-success text-success fixed-answers-button" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions">
    Ответы
</button>

<div class="offcanvas offcanvas-bottom h-50" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Ответы!</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="answers-parent">
            
        </div>
    </div>
</div>



@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            let timers = {};
            let timeSpent = [];
            let selectedAnswers = [];
            let currentPage = 1;
            let totalTestTime = 0;
        
            function initializeTimers() {
                const testContainers = document.querySelectorAll('.test-container');
                totalTestTime = 0; // Reset total test time
                testContainers.forEach(testContainer => {
                    const testId = testContainer.dataset.testid;
                    const testTime = parseInt(testContainer.dataset.testtime, 10) * 60;
                    totalTestTime += testTime; // Add this test's time to total
                    timers[testId] = {
                        originalTime: testTime,
                        timeLeft: testTime,
                        interval: null
                    };
                });
                updateTotalCountdown(); // Initialize the total countdown
            }
        
            function formatTime(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const secs = seconds % 60;
                return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
            }
        
            function startTimer(testId, testName) {
                const countdownElement = document.getElementById('countdown');
                if (timers[testId].interval) {
                    clearInterval(timers[testId].interval);
                }
                const finishTestName = document.getElementById('finishTestName');
                finishTestName.innerText = testName;
                timers[testId].interval = setInterval(function() {
                    if (timers[testId].timeLeft <= 0) {
                        clearInterval(timers[testId].interval);
                        countdownElement.innerHTML = "Время вышло!";
                    } else {
                        countdownElement.innerHTML = `${formatTime(timers[testId].timeLeft)} <br> <span> ${testName} </span>`;
                        timers[testId].timeLeft--;
                        updateTotalCountdown(); // Update total time on each tick
                    }
                }, 1000);
            }
        
            function stopTimer(testId) {
                if (timers[testId].interval) {
                    clearInterval(timers[testId].interval);
                }
            }
        
            function saveTimeSpent(testId) {
                const timer = timers[testId];
                const timeSpentTest = (timer.originalTime - timer.timeLeft);
                const existingEntry = timeSpent.find(entry => entry.testId === testId);
                if (existingEntry) {
                    existingEntry.timeSpent = timeSpentTest;
                } else {
                    timeSpent.push({ testId: testId, timeSpent: timeSpentTest });
                }
            }
        
            function updateTotalCountdown() {
                const totalTimeLeft = Object.values(timers).reduce((acc, timer) => acc + timer.timeLeft, 0);
                document.getElementById('total-countdown').innerHTML = `${formatTime(totalTimeLeft)} <br> <span>Общее время</span>`;
            }
        
            function updatePaginationButtonState() {
                const testContainers = document.querySelectorAll('.test-container');
                const totalTests = testContainers.length;
                document.getElementById('prev-page').disabled = currentPage === 1;
                const testName = testContainers.dataset.testname;
                document.getElementById('next-page').textContent = 'Завершить' + testName;
        
                document.querySelectorAll('.answer-radio').forEach(function(radio) {
                    if (radio.checked) {
                        radio.parentElement.style.backgroundColor = '#58CC02';
                        radio.parentElement.classList.add('text-white');
                    } else {
                        radio.parentElement.style.backgroundColor = '';
                        radio.parentElement.classList.remove('text-white');
                    }
                });
            }
        
          
        
            document.querySelectorAll('.answer-radio').forEach(function(radio) {
                radio.addEventListener('click', function() {
                    const questionContainer = radio.closest('.question-container');
                    const questionId = questionContainer.dataset.questionid;
                    const testContainer = radio.closest('.test-container');
                    const testId = testContainer.dataset.testid;
                    
                    if (radio.checked) {
                        radio.parentElement.style.backgroundColor = '#58CC02';
                        radio.parentElement.classList.add('text-white');
                        selectedAnswers[radio.name] = {
                            testId: testId,
                            questionId: questionId,
                            answerId: radio.value
                        };
                    } else {
                        radio.parentElement.style.backgroundColor = '';
                        radio.parentElement.classList.remove('text-white');
                        delete selectedAnswers[radio.name];
                    }
                    updatePaginationButtonState();
                });
            });
        
            function renderTests() {
                const testContainers = document.querySelectorAll('.test-container');
                window.scrollTo(0, 0);
                testContainers.forEach(function(testContainer, index) {
                    testContainer.style.display = (index === currentPage - 1) ? 'block' : 'none';
                });
                const testId = testContainers[currentPage - 1].dataset.testid;
                const testName = testContainers[currentPage - 1].dataset.testname;
                startTimer(testId, testName);
                updatePaginationButtonState();
            }
        
            document.getElementById('prev-page').addEventListener('click', function() {
                if (currentPage > 1) {
                    const testContainers = document.querySelectorAll('.test-container');
                    const currentTestId = testContainers[currentPage - 1].dataset.testid;
                    stopTimer(currentTestId);
                    currentPage--;
                    renderTests();
                }
            });
        
            document.getElementById('next-page').addEventListener('click', function() {
                const totalTests = document.querySelectorAll('.test-container').length;
                const testContainers = document.querySelectorAll('.test-container');
                const currentTestId = testContainers[currentPage - 1].dataset.testid;
                saveTimeSpent(currentTestId);
                stopTimer(currentTestId);
        
                if (currentPage < totalTests) {
                    currentPage++;
                    renderTests();
                } else {
                    axios.post('@Url.Action("Index", "Tests")', 
                    {
                        selectedAnswers: Object.values(selectedAnswers),
                        timeSpent: timeSpent
                    })
                        .then(response => {
                            window.location.href = `@Url.Action("Result", "Tests")/?isPassed=${response.data.isPassed}&lessonId=${response.data.lessonId}&subtopicId=${response.data.subtopicId}`;
                        })
                        .catch(error => {
                            console.error('Error sending data:', error);
                        });
                }
            });
        
            initializeTimers();
            renderTests(); // Initial render
        });

    </script>
}

