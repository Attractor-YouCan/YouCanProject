version: '3.9'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5001:80"  # Проксирование порта 80 внутри контейнера на порт 5001 хоста
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      db:
        condition: service_healthy  # Проверка готовности сервиса базы данных
    volumes:
      - data-protection-keys:/root/.aspnet/DataProtection-Keys  # Тома для защиты данных

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: YouCan
    ports:
      - "5432:5432"  # Использование стандартного порта PostgreSQL
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:  # Проверка состояния здоровья сервиса базы данных
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "90:80"  # Проксирование порта 80 контейнера на порт 90 хоста
    depends_on:
      web:
        condition: service_started  # Проверка, что web-сервис начал работать
    networks:
      - webnet

volumes:
  pgdata:
    driver: local
  data-protection-keys:  # Том для ключей защиты данных
    driver: local

