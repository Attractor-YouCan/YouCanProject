// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YouCan.Models;

#nullable disable

namespace YouCan.Migrations
{
    [DbContext(typeof(YouCanContext))]
    partial class YouCanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YouCan.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "A больше"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "B больше"
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = " оба равны"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "нельзя сравнить"
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Площадь под функции f(x)"
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "интеграл от f(x) от 0 до x"
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "Функция, производная которой равна f(x)"
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Функция, производная которой равна Y(f-k)"
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Грамматика это чудо"
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Грамматика это таска"
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Грамматика это пипец"
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = true,
                            QuestionId = 3,
                            Text = "Грамматика это 5 по русскому"
                        });
                });

            modelBuilder.Entity("YouCan.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Lecture")
                        .HasColumnType("text");

                    b.Property<int?>("LessonLevel")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text");

                    b.Property<int>("SubtopicId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubtopicId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 1,
                            RequiredLevel = 0,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 2,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 2,
                            RequiredLevel = 1,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 3,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 3,
                            RequiredLevel = 2,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 4,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 4,
                            RequiredLevel = 3,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 5,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 5,
                            RequiredLevel = 4,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 6,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 6,
                            RequiredLevel = 5,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 7,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 7,
                            RequiredLevel = 6,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 8,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 8,
                            RequiredLevel = 7,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 9,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 9,
                            RequiredLevel = 8,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 10,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 10,
                            RequiredLevel = 9,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        },
                        new
                        {
                            Id = 11,
                            Description = "понятие интеграла;\nзамена переменной при интегрировании и интегрирование по частям;\nприменение определённых интегралов в геометрии и физике;\nдифференциальные уравнения.",
                            Lecture = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            LessonLevel = 11,
                            RequiredLevel = 10,
                            SubTitle = "Интеграл — одно из важнейших понятий математического анализа, которое возникает при решении задач",
                            SubtopicId = 1,
                            Title = "Integrals",
                            VideoUrl = "/userImages/defProf-ProfileN=1.png"
                        });
                });

            modelBuilder.Entity("YouCan.Models.LessonModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonModule");
                });

            modelBuilder.Entity("YouCan.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "23 : 34",
                            Instruction = "Что больше?",
                            IsPublished = false,
                            TestId = 1,
                            Type = "analogy"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Что такое интеграл?",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            TestId = 1,
                            Type = "general"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Грамматика это___",
                            Instruction = "Отметьте вариант, наиболее близкий к контрольной паре",
                            IsPublished = false,
                            TestId = 1,
                            Type = "general"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Птица : Гнездо",
                            Instruction = "Отметьте вариант, наиболее близкий к контрольной паре",
                            IsPublished = false,
                            TestId = 2,
                            Type = "analogy"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Что такое интеграл?",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            TestId = 2,
                            Type = "general"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Lorem Ipsum - это текст-\"рыба\", часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной \"рыбой\" для текстов на латинице с начала XVI века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн.",
                            Instruction = "Отвечайте на следующие вопросы",
                            IsPublished = false,
                            TestId = 2,
                            Type = "general"
                        });
                });

            modelBuilder.Entity("YouCan.Models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Streak")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StudyMinutes")
                        .HasColumnType("interval");

                    b.Property<int>("TotalExperience")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("YouCan.Models.Subtopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Subtopics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/topicImages/mathematics1icon.png",
                            Name = "Mathematics1",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/topicImages/mathematics2icon.png",
                            Name = "Mathematics2",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/topicImages/analogyIcon.png",
                            Name = "Analogy",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/topicImages/grammarIcon.png",
                            Name = "Grammar",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "/topicImages/readUnderstIcon.png",
                            Name = "Reading and Understanding",
                            TopicId = 2
                        });
                });

            modelBuilder.Entity("YouCan.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GainingExperience")
                        .HasColumnType("integer");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("TimeForTest")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GainingExperience = 0,
                            LessonId = 1
                        },
                        new
                        {
                            Id = 2,
                            GainingExperience = 0,
                            LessonId = 2
                        });
                });

            modelBuilder.Entity("YouCan.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("YouCan.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("YouCan.Models.UserLessons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int?>("PassedLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("SubtopicId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("SubtopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLessons");
                });

            modelBuilder.Entity("YouCan.Models.UserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("SubtopicId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubtopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLevels");
                });

            modelBuilder.Entity("YouCan.Models.UserOrtTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserORTTests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YouCan.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YouCan.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YouCan.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YouCan.Models.Answer", b =>
                {
                    b.HasOne("YouCan.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("YouCan.Models.Lesson", b =>
                {
                    b.HasOne("YouCan.Models.Subtopic", "Subtopic")
                        .WithMany("Lessons")
                        .HasForeignKey("SubtopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subtopic");
                });

            modelBuilder.Entity("YouCan.Models.LessonModule", b =>
                {
                    b.HasOne("YouCan.Models.Lesson", "Lesson")
                        .WithMany("LessonModules")
                        .HasForeignKey("LessonId");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("YouCan.Models.Question", b =>
                {
                    b.HasOne("YouCan.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId");

                    b.HasOne("YouCan.Models.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Models.Statistic", b =>
                {
                    b.HasOne("YouCan.Models.User", "User")
                        .WithOne("Statistic")
                        .HasForeignKey("YouCan.Models.Statistic", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Models.Subtopic", b =>
                {
                    b.HasOne("YouCan.Models.Topic", "Topic")
                        .WithMany("Subtopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("YouCan.Models.Test", b =>
                {
                    b.HasOne("YouCan.Models.Lesson", "Lesson")
                        .WithMany("Tests")
                        .HasForeignKey("LessonId");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("YouCan.Models.UserLessons", b =>
                {
                    b.HasOne("YouCan.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("YouCan.Models.Subtopic", "Subtopic")
                        .WithMany()
                        .HasForeignKey("SubtopicId");

                    b.HasOne("YouCan.Models.User", "User")
                        .WithMany("Lessons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Subtopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Models.UserLevel", b =>
                {
                    b.HasOne("YouCan.Models.Subtopic", "Subtopic")
                        .WithMany()
                        .HasForeignKey("SubtopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Models.User", "User")
                        .WithMany("UserLevels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subtopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Models.UserOrtTest", b =>
                {
                    b.HasOne("YouCan.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YouCan.Models.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YouCan.Models.Lesson", b =>
                {
                    b.Navigation("LessonModules");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("YouCan.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("YouCan.Models.Subtopic", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("YouCan.Models.Test", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("YouCan.Models.Topic", b =>
                {
                    b.Navigation("Subtopics");
                });

            modelBuilder.Entity("YouCan.Models.User", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Questions");

                    b.Navigation("Statistic");

                    b.Navigation("Tests");

                    b.Navigation("UserLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
